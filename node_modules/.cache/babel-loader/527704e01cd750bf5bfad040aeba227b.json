{"ast":null,"code":"import { put, takeLatest, all, call, select } from 'redux-saga/effects';\nimport { AppActions, postLogin, postLogout, setPlanets } from \"../actions\";\nimport { baseAPIResource } from \"../utils/apiHelper\"; // function* fetchNews() {\n//   const json = yield fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc')\n//     .then(response => response.json());\n//   yield put({ type: \"NEWS_RECEIVED\", json: json.articles || [{ error: json.message }] });\n// }\n\nexport function* doLoginAndGetData(action) {\n  try {\n    const _action$payload = action.payload,\n          username = _action$payload.username,\n          password = _action$payload.password;\n    const response = yield call(baseAPIResource.get, \"people/?search=\".concat(username));\n    const results = response.data.results;\n    const userData = results.length ? results.filter(user => {\n      const name = user.name,\n            birth_year = user.birth_year;\n      return birth_year == password && name.toLowerCase() == username.toLowerCase();\n    }) : [];\n    const isValidUser = userData.length;\n\n    if (!isValidUser) {\n      alert(\"Invalid credentials\");\n    } else {\n      sessionStorage.setItem(\"userData\", JSON.stringify(userData));\n      sessionStorage.setItem(\"isLoggedIn\", true);\n      yield put(postLogin(userData)); // yield put(newHistory.push(\"/planets\"));\n    }\n  } catch (e) {\n    console.log(\"Login error: \", e);\n  }\n}\n\nfunction* doLogout() {\n  try {\n    sessionStorage.setItem(\"isLoggedIn\", false);\n    yield put(postLogout());\n  } catch (e) {\n    console.log(\"Logout error: \", e);\n  }\n}\n\nexport function* searchPlanets(action) {\n  try {\n    let searchCount = JSON.parse(sessionStorage.getItem(\"search-count\")) || 0;\n    const isLoggedIn = JSON.parse(sessionStorage.getItem(\"isLoggedIn\"));\n    const lastSearch = JSON.parse(sessionStorage.getItem(\"last-search\"));\n    let delta = (Date.now() - lastSearch) / 60000;\n    debugger;\n\n    if (!isLoggedIn && searchCount % 15 == 0 && delta < 1) {\n      const history = action.payload.history;\n      alert(\"Only 15 search in a min allowed for guest user, please login or come back later.\");\n      history.push(\"/login\");\n    } else {\n      const param = action.payload.param;\n      const response = yield call(baseAPIResource.get, \"planets/?search=\".concat(param));\n      const results = response.data.results;\n      yield put(setPlanets(results));\n      sessionStorage.setItem(\"search-count\", ++searchCount);\n      sessionStorage.setItem(\"last-search\", Date.now());\n    }\n  } catch (e) {\n    console.log(\"Planets search API error: \", e);\n  }\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(AppActions.LOGIN_CLICKED, doLoginAndGetData);\n  yield takeLatest(AppActions.LOGOUT_CLICKED, doLogout);\n  yield takeLatest(AppActions.GET_PLANETS, searchPlanets);\n}\n\nexport default function* rootSaga() {\n  yield all([actionWatcher()]);\n}","map":{"version":3,"sources":["/Users/sharvankumar/brainstorm/swapi/swapi/src/sagas/index.js"],"names":["put","takeLatest","all","call","select","AppActions","postLogin","postLogout","setPlanets","baseAPIResource","doLoginAndGetData","action","payload","username","password","response","get","results","data","userData","length","filter","user","name","birth_year","toLowerCase","isValidUser","alert","sessionStorage","setItem","JSON","stringify","e","console","log","doLogout","searchPlanets","searchCount","parse","getItem","isLoggedIn","lastSearch","delta","Date","now","history","push","param","actionWatcher","LOGIN_CLICKED","LOGOUT_CLICKED","GET_PLANETS","rootSaga"],"mappings":"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","sourcesContent":["import { put, takeLatest, all, call, select } from 'redux-saga/effects';\nimport { AppActions, postLogin, postLogout, setPlanets } from \"../actions\";\nimport { baseAPIResource } from \"../utils/apiHelper\";\n\n\n// function* fetchNews() {\n\n//   const json = yield fetch('https://newsapi.org/v1/articles?source=cnn&apiKey=c39a26d9c12f48dba2a5c00e35684ecc')\n//     .then(response => response.json());\n\n//   yield put({ type: \"NEWS_RECEIVED\", json: json.articles || [{ error: json.message }] });\n// }\n\nexport function* doLoginAndGetData(action) {\n  try {\n    const { username, password } = action.payload;\n    const response = yield call(baseAPIResource.get, `people/?search=${username}`);\n    const results = response.data.results;\n    const userData = results.length ? results.filter(user => {\n      const { name, birth_year } = user;\n      return (birth_year == password) && (name.toLowerCase() == username.toLowerCase());\n    }) : [];\n    const isValidUser = userData.length;\n\n    if (!isValidUser) {\n      alert(\"Invalid credentials\");\n    } else {\n      sessionStorage.setItem(\"userData\", JSON.stringify(userData));\n      sessionStorage.setItem(\"isLoggedIn\", true);\n      yield put(postLogin(userData));\n\n      // yield put(newHistory.push(\"/planets\"));\n    }\n  } catch (e) {\n    console.log(\"Login error: \", e);\n  }\n}\n\nfunction* doLogout() {\n  try {\n    sessionStorage.setItem(\"isLoggedIn\", false);\n    yield put(postLogout());\n  } catch (e) {\n    console.log(\"Logout error: \", e);\n  }\n}\n\nexport function* searchPlanets(action) {\n  try {\n    let searchCount = JSON.parse(sessionStorage.getItem(\"search-count\")) || 0;\n    const isLoggedIn = JSON.parse(sessionStorage.getItem(\"isLoggedIn\"));\n    const lastSearch =  JSON.parse(sessionStorage.getItem(\"last-search\"));\n    let delta = ((Date.now() - lastSearch))/60000;\n\n    debugger;\n    if(!isLoggedIn && (searchCount % 15) == 0 && (delta < 1)) {\n      const { history } = action.payload;\n      alert(\"Only 15 search in a min allowed for guest user, please login or come back later.\");\n      history.push(\"/login\");\n    } else {\n      const { param } = action.payload;\n      const response = yield call(baseAPIResource.get, `planets/?search=${param}`);\n      const results = response.data.results;\n      yield put(setPlanets(results));\n      sessionStorage.setItem(\"search-count\", ++searchCount);\n      sessionStorage.setItem(\"last-search\", Date.now());\n    }\n  } catch (e) {\n    console.log(\"Planets search API error: \", e);\n  }\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(AppActions.LOGIN_CLICKED, doLoginAndGetData);\n  yield takeLatest(AppActions.LOGOUT_CLICKED, doLogout);\n  yield takeLatest(AppActions.GET_PLANETS, searchPlanets);\n}\n\n\nexport default function* rootSaga() {\n  yield all([\n    actionWatcher(),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}